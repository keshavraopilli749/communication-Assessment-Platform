// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CANDIDATE
}

enum Difficulty {
  easy
  medium
  hard
}

enum QuestionType {
  mcq
  short
  speaking
  listening
  nonverbal
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  role      UserRole @default(CANDIDATE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdAssessments Assessment[]
  responses          Response[]
  results            Result[]

  @@map("users")
}

model Module {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String
  icon        String?
  createdAt   DateTime @default(now())

  // Relations
  sections Section[]

  @@map("modules")
}

model Section {
  id                String   @id @default(cuid())
  moduleId          String
  title             String
  description       String
  questionCount     Int      @default(0)
  timeLimitSeconds  Int      @default(0)
  createdAt         DateTime @default(now())

  // Relations
  module      Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  assessments Assessment[]

  @@map("sections")
}

model Assessment {
  id              String     @id @default(cuid())
  sectionId       String
  title           String
  description     String
  difficulty      Difficulty
  durationSeconds Int
  createdById     String
  createdAt       DateTime   @default(now())

  // Relations
  section   Section    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  creator   User       @relation(fields: [createdById], references: [id], onDelete: Cascade)
  questions Question[]
  results   Result[]

  @@map("assessments")
}

model Question {
  id                String       @id @default(cuid())
  assessmentId      String
  text              String
  type              QuestionType
  timeLimitSeconds  Int          @default(60)
  metadata          Json?
  answerKey         String?
  createdAt         DateTime     @default(now())

  // Relations
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  choices    Choice[]
  responses  Response[]

  @@map("questions")
}

model Choice {
  id         String   @id @default(cuid())
  questionId String
  text       String
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("choices")
}

model Response {
  id              String    @id @default(cuid())
  userId          String
  questionId      String
  answerText      String?
  answerMediaUrl  String?
  isCorrect       Boolean?
  recordedAt      DateTime  @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@map("responses")
}

model Result {
  id           String   @id @default(cuid())
  userId       String
  assessmentId String
  score        Float
  total        Float
  submittedAt  DateTime @default(now())
  details      Json?

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@unique([userId, assessmentId])
  @@map("results")
}
